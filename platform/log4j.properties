#=====日志框架
#最早是System.out.print
#org.apache.log4j.Logger
#org.apache.commons.logging.Log
#java.util.logging.Logger
#org.slf4j.Logger 面向接口编程，选择实现（选择都使用这个）

#=======日志等级

#TRACE：详细等级，堆栈信息
#debug：类似于System.out.print
#info：类似于Hibernate的show_sql
#warn：不影响运行， 只是提示
#error：出现异常

#========全局日志等级配置,输出位置
# og4j.rootLogger  =   [ level ]   ,  appenderName1 ,  appenderName2 ,  …
log4j.rootLogger=DEBUG, console, fileDebug, fileInfo, fileError
log4j.rootLogger.encoding=UTF-8

log4j.logger.little.ant=DEBUG
log4j.logger.com.jfinal=DEBUG
log4j.logger.org=WARN
log4j.logger.com=WARN
log4j.logger.net=WARN
log4j.logger.javax=WARN
log4j.logger.oracle=WARN
log4j.logger.com.alibaba.druid=WARN
log4j.logger.SYSTEM = INFO

#配置日志信息输出目的地Appender
#log4j.appender.appenderName  =  fully.qualified.name.of.appender.class 
#　　log4j.appender.appenderName.option1  =  value1 
#　　… 
#　　log4j.appender.appenderName.optionN  =  valueN 

#配置日志信息的格式（布局）
#log4j.appender.appenderName.layout  =  fully.qualified.name.of.layout.class 
#　　log4j.appender.appenderName.layout.option1  =  value1 
#　　… 
#　　log4j.appender.appenderName.layout.optionN  =  valueN 

# 输出到控制台
log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.Threshold=DEBUG
log4j.appender.console.encoding=UTF-8
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%n%-d{yyyy-MM-dd HH:mm:ss}%n[%p]-[Thread: %t]-[%C.%M()]: %m%n

# 输出到web页面
log4j.appender.webpage=com.platform.servlet.Log4jAppender
log4j.appender.webpage.encoding=UTF-8
log4j.appender.webpage.Append=true
log4j.appender.webpage.Threshold=DEBUG
log4j.appender.webpage.layout=org.apache.log4j.PatternLayout
log4j.appender.webpage.layout.ConversionPattern=%d %p [%c] - %m%n

# 输出到文件 debug
log4j.appender.fileDebug=org.apache.log4j.DailyRollingFileAppender
log4j.appender.fileDebug.encoding=UTF-8
log4j.appender.fileDebug.Append=true
log4j.appender.fileDebug.Threshold=DEBUG
log4j.appender.fileDebug.File=${catalina.home}/logs/debug.log
log4j.appender.fileDebug.layout=org.apache.log4j.PatternLayout
log4j.appender.fileDebug.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss.SSS} %p [%t] <%F [%L] - %M> <%m> %X{traceId}%n

# 输出到文件 info
log4j.appender.fileInfo=org.apache.log4j.DailyRollingFileAppender
log4j.appender.fileInfo.encoding=UTF-8
log4j.appender.fileInfo.Append=true
log4j.appender.fileInfo.Threshold=INFO
log4j.appender.fileInfo.File=${catalina.home}/logs/info.log
log4j.appender.fileInfo.layout=org.apache.log4j.PatternLayout
log4j.appender.fileInfo.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss.SSS} %p [%t] <%F [%L] - %M> <%m>%n

# 输出到文件 error
log4j.appender.fileError=org.apache.log4j.RollingFileAppender
log4j.appender.fileError.encoding=UTF-8
log4j.appender.fileError.Append=true
log4j.appender.fileError.Threshold=ERROR
log4j.appender.fileError.File=${catalina.home}/logs/error.log
log4j.appender.info.datePattern='.'yyyy-MM
log4j.appender.fileError.MaxFileSize=2MB
log4j.appender.fileError.MaxBackupIndex=100
log4j.appender.fileError.layout=org.apache.log4j.PatternLayout
log4j.appender.fileError.layout.ConversionPattern=%-d{yyyy-MM-dd HH:mm:ss.SSS} %p [%t] <%l> %m%n

# ConversionPattern参数的格式含义 
# 格式名 含义 
# %c 输出日志信息所属的类的全名 
# %d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyy-MM-dd HH:mm:ss }，输出类似：2002-10-18- 22：10：28 
# %f 输出日志信息所属的类的类名 
# %l 输出日志事件的发生位置，即输出日志信息的语句处于它所在的类的第几行 
# %m 输出代码中指定的信息，如log(message)中的message 
# %n 输出一个回车换行符，Windows平台为“rn”，Unix平台为“n” 
# %p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL。如果是调用debug()输出的，则为DEBUG，依此类推 
# %r 输出自应用启动到输出该日志信息所耗费的毫秒数 
# %t 输出产生该日志事件的线程名